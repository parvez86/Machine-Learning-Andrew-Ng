Section 1:
1. findClosestCentroids.m:
    m = size(X, 1)
    for i=1:m
        dist_array = zeros(1,K)
        for j=1:K
            dist_array(1, j) = sqrt(sum(power((X(i,:)-centroids(j, :)),2)))
        end
        [~, min_idx] = min(dist_array)
        idx(i,1) = min_idx
    end

2. run:
    % Load an example dataset that we will be using
    load('ex7data2.mat');
    
    % Select an initial set of centroids
    K = 3; % 3 Centroids
    initial_centroids = [3 3; 6 2; 8 5];
    
    % Find the closest centroids for the examples using the initial_centroids
    idx = findClosestCentroids(X, initial_centroids);
    fprintf('Closest centroids for the first 3 examples: %d %d %d', idx(1:3))

3. computeCentroids.m:
    for k = 1:K
        centroids(k, :) = mean(X(idx==k,:))
    end

4. run:
    %Compute means based on the closest centroids found in the previous part.
    centroids = computeCentroids(X, idx, K);
    fprintf('Centroids computed after initial finding of closest centroids: \n %f %f \n %f %f\n %f %f' , centroids');

5. run:
    % Load an example dataset
    load('ex7data2.mat');
    % Settings for running K-Means
    max_iters = 10;

6. run:
    initial_centroids = [3 3; 6 2; 8 5];
    
    % Run K-Means algorithm. The 'true' at the end tells our function to plot the progress of K-Means
    figure('visible','on'); hold on; 
    plotProgresskMeans(X, initial_centroids, initial_centroids, idx, K, 1); 
    xlabel('Press ENTER in command window to advance','FontWeight','bold','FontSize',14)
    [~, ~] = runkMeans(X, initial_centroids, max_iters, true);
    set(gcf,'visible','off'); hold off;

7. kMeansinitCentroids.m:
    % Initialize the centroids to be random examples
    
    %Randomly reorder the indicies of examples
    randidx = randperm(size(X,1));
    % Take the first K examples
    centroids = X(randidx(1:K),:);

8. run:
    %  Load an image of a bird
    A = double(imread('bird_small.png'));
    A = A / 255; % Divide by 255 so that all values are in the range 0 - 1
    
    % Size of the image
    img_size = size(A);
    
    X = reshape(A, img_size(1) * img_size(2), 3);
    
    K = 16;
    max_iters = 10;
    
    initial_centroids = kMeansInitCentroids(X, K);
    % Run K-Means
    [centroids, ~] = runkMeans(X, initial_centroids, max_iters);

9. run:
    % Find closest cluster members
    idx = findClosestCentroids(X, centroids);

10. run:
    X_recovered = centroids(idx,:);
    
    % Reshape the recovered image into proper dimensions
    X_recovered = reshape(X_recovered, img_size(1), img_size(2), 3);
    
    % Display the original image 
    figure;
    subplot(1, 2, 1);
    imagesc(A); 
    title('Original');
    axis square
    
    % Display compressed image side by side
    subplot(1, 2, 2);
    imagesc(X_recovered)
    title(sprintf('Compressed, with %d colors.', K));
    axis square


Section 2: PCA

11. run:
    clear;
    % The following command loads the dataset. You should now have the variable X in your environment
    load ('ex7data1.mat');
    
    % Visualize the example dataset
    figure;
    plot(X(:, 1), X(:, 2), 'bo');
    axis([0.5 6.5 2 8]); axis square;


12. pca.m:
    sigma = sum(X' * X)/m
    [U, S, V] = svd(sigma)

13. run:
    % Before running PCA, it is important to first normalize X
    [X_norm, mu, ~] = featureNormalize(X);
    
    % Run PCA
    [U, S] = pca(X_norm);
    
    % Draw the eigenvectors centered at mean of data. These lines show the directions of maximum variations in the dataset.
    hold on;
    drawLine(mu, mu + 1.5 * S(1,1) * U(:,1)', '-k', 'LineWidth', 2);
    drawLine(mu, mu + 1.5 * S(2,2) * U(:,2)', '-k', 'LineWidth', 2);
    hold off;
    
    fprintf('Top eigenvector U(:,1) = %f %f \n', U(1,1), U(2,1));

14. projectData.m:
    m = size(X, 1)
    for i=1:m
        for j=1:K
            U_reduce = U(:,j)
            x = X(i, :)
            Z(i,j) = x * U_reduce
        end
    end

15. run:
    % Project the data onto K = 1 dimension
    K = 1;
    Z = projectData(X_norm, U, K);
    fprintf('Projection of the first example: %f\n', Z(1));

16. recoverData.m:
    for i=1:size(Z,1)
        for j=1:size(U,1)
            v = Z(i, :)
            X_rec(i,j) = v * U(j, 1:K)'
        end
    end

17. run:
    X_rec  = recoverData(Z, U, K);
    fprintf('Approximation of the first example: %f %f\n', X_rec(1, 1), X_rec(1, 2));

submit

18. run:
    %  Plot the normalized dataset (returned from pca)
    plot(X_norm(:, 1), X_norm(:, 2), 'bo');
    axis([-4 3 -4 3]); axis square
    %  Draw lines connecting the projected points to the original points
    hold on;
    plot(X_rec(:, 1), X_rec(:, 2), 'ro');
    for i = 1:size(X_norm, 1)
        drawLine(X_norm(i,:), X_rec(i,:), '--k', 'LineWidth', 1);
    end
    hold off

19. run:
    %  Load Face dataset
    load ('ex7faces.mat')
    %  Display the first 100 faces in the dataset
    displayData(X(1:100, :));

20. run:
    X_rec  = recoverData(Z, U, K);
    
    % Display normalized data
    subplot(1, 2, 1);
    displayData(X_norm(1:100,:));
    title('Original faces');
    axis square;
    
    % Display reconstructed data from only k eigenfaces
    subplot(1, 2, 2);
    displayData(X_rec(1:100,:));
    title('Recovered faces');
    axis square;