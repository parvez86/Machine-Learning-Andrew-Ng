Session 1 (SVM):
1. run:
    % Load from ex6data1: 
    % You will have X, y in your environment
    load('ex6data1.mat');
    
    % Plot training data
    plotData(X, y);

2. run:
    % SVM Parameters
    C = 1; sigma = 0.1;
    
    % We set the tolerance and max_passes lower here so that the code will run faster. However, in practice, 
    % you will want to run the training to convergence.
    model= svmTrain(X, y, C, @(x1, x2) gaussianKernel(x1, x2, sigma)); 
    visualizeBoundary(X, y, model);

3. gaussianKernel.m:
    sim = exp(-(sum((x1-x2) .^2))/(2 * sigma * sigma))

4. run:
    x1 = [1 2 1]; x2 = [0 4 -1]; sigma = 2;
    sim = gaussianKernel(x1, x2, sigma);
    
    fprintf('Gaussian Kernel between x1 = [1; 2; 1], x2 = [0; 4; -1], sigma = 0.5 : \n\t%f\n', sim);

(submit)

5. run:
    % Load from ex6data2: 
    % You will have X, y in your environment
    load('ex6data2.mat');
    
    % Plot training data
    plotData(X, y);

6. run:
    % SVM Parameters
    C = 1; sigma = 0.1;
    
    % We set the tolerance and max_passes lower here so that the code will run faster. However, in practice, 
    % you will want to run the training to convergence.
    model= svmTrain(X, y, C, @(x1, x2) gaussianKernel(x1, x2, sigma)); 
    visualizeBoundary(X, y, model);
7. run:
    % Load from ex6data3: 
    % You will have X, y in your environment
    load('ex6data3.mat');
    
    % Plot training data
    plotData(X, y);

8. dataset3Params.m:
    results = eye(64, 3)
    errorRow = 0
    
    for C_test = [0.01, 0,03, 0.1, 0.3, 1, 3, 10, 30]
        for sigma_test = [ 0.01, 0,03, 0.1, 0.3, 1, 3, 10, 30]
            errorRow = errorRow + 1
            model= svmTrain(X, y, C_test, @(x1, x2) gaussianKernel(x1, x2, sigma_test));
            predictions = svmPredict(model, Xval)
            
            P_error = mean(double(predictions ~= yval))
            results(errorRow, :) = [C_test, sigma_test, P_error]
        end
    end
    
    sorted_rows = sortrows(results, 3)
    C = sorted_rows(1,1)
    sigma = sorted_rows(1,2)
9. run:
    % Try different SVM Parameters here
    [C, sigma] = dataset3Params(X, y, Xval, yval);
    
    % Train the SVM
    model = svmTrain(X, y, C, @(x1, x2)gaussianKernel(x1, x2, sigma));
    visualizeBoundary(X, y, model);

(submit)

Session2 (spam filtering):

10. processemail.m:
    idx = strmatch(str, vocabList, 'exact')
        if ~isempty(idx)
            word_indices = [word_indices; idx]
        end

11. run:
    %% Initialization
    clear;
    
    % Extract Features
    file_contents = readFile('emailSample1.txt');
    word_indices  = processEmail(file_contents);
    % Print Stats
    disp(word_indices)

12. emailFeatures.m:
    x(word_indices) = 1

13. run:
    % Load the Spam Email dataset
    % You will have X, y in your environment
    load('spamTrain.mat');
    C = 0.1;
    model = svmTrain(X, y, C, @linearKernel);
    
    p = svmPredict(model, X);
    fprintf('Training Accuracy: %f\n', mean(double(p == y)) * 100);
    
    % Load the test dataset
    % You will have Xtest, ytest in your environment
    load('spamTest.mat');
    
    p = svmPredict(model, Xtest);
    fprintf('Test Accuracy: %f\n', mean(double(p == ytest)) * 100);


14. For top predctions:
    % Sort the weights and obtin the vocabulary list
    [weight, idx] = sort(model.w, 'descend');
    vocabList = getVocabList();
    for i = 1:15
        if i == 1
            fprintf('Top predictors of spam: \n');
        end
        fprintf('%-15s (%f) \n', vocabList{idx(i)}, weight(i));
    end 


// Optional
15. run: 
    %% Initialization
        clear;
        
        % Extract Features
        file_contents = readFile('emailSample1.txt');
        word_indices  = processEmail(file_contents);
        % Print Stats
        disp(word_indices)

16. 
run:
    % Load the Spam Email dataset
    % You will have X, y in your environment
    load('spamTrain.mat');
    C = 0.1;
    model = svmTrain(X, y, C, @linearKernel);
    
    p = svmPredict(model, X);
    fprintf('Training Accuracy: %f\n', mean(double(p == y)) * 100);
    
    % Load the test dataset
    % You will have Xtest, ytest in your environment
    load('spamTest.mat');
    
    p = svmPredict(model, Xtest);
    fprintf('Test Accuracy: %f\n', mean(double(p == ytest)) * 100);