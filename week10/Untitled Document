quiz.17:


Question 1

Suppose you are training a logistic regression classifier using stochastic gradient descent. You find that the cost (say, cost(θ,(x(i),y(i)))cost(\theta,(x^{(i)}, y^{(i)}))cost(θ,(x(i),y(i))), averaged over the last 500 examples), plotted as a function of the number of iterations, is slowly increasing over time. Which of the following changes are likely to help?
1 point

W. Try using a larger learning rate α\alphaα.

W. This is not an issue, as we expect this to occur with stochastic gradient descent.

Try using a smaller learning rate α\alphaα.

W. Try averaging the cost over a larger number of examples (say 1000 examples instead of 500) in the plot.


2.
Question 2

Which of the following statements about stochastic gradient

descent are true? Check all that apply.
1 point

Suppose you are using stochastic gradient descent to train a linear regression classifier. The cost function J(θ)=12m∑i=1m(hθ(x(i))−y(i))2J(\theta) = \frac{1}{2m} \sum_{i=1}^m (h_\theta(x^{(i)}) - y^{(i)})^2J(θ)=2m1​∑i=1m​(hθ​(x(i))−y(i))2 is guaranteed to decrease after every iteration of the stochastic gradient descent algorithm.

In order to make sure stochastic gradient descent is converging, we typically compute Jtrain(θ)J_{\rm train}(\theta)Jtrain​(θ) after each iteration (and plot it) in order to make sure that the cost function is generally decreasing.

C. You can use the method of numerical gradient checking to verify that your stochastic gradient descent implementation is bug-free. (One step of stochastic gradient descent computes the partial derivative ∂∂θjcost(θ,(x(i),y(i)))\frac{\partial}{\partial \theta_j} cost(\theta, (x^{(i)}, y^{(i)}))∂θj​∂​cost(θ,(x(i),y(i))).)

C. Before running stochastic gradient descent, you should randomly shuffle (reorder) the training set. 

A.  If you have a huge training set, then stochastic gradient descent may be much faster than batch gradient descent.


3.
Question 3

Which of the following statements about online learning are true? Check all that apply.
1 point

C. One of the advantages of online learning is that if the function we're modeling changes over time (such as if we are modeling the probability of users clicking on different URLs, and user tastes/preferences are changing over time), the online learning algorithm will automatically adapt to these changes.

C. Online learning algorithms are usually best suited to problems were we have a continuous/non-stop stream of data that we want to learn from.

Online learning algorithms are most appropriate when we have a fixed training set of size mmm that we want to train on.

When using online learning, you must save every new training example you get, as you will need to reuse past examples to re-train the model even after you get new training examples in the future.


One of the disadvantages of online learning is that it requires a large amount of computer memory/disk space to store all the training examples we have seen.

C. When using online learning, in each step we get a new example (x,y)(x,y)(x,y), perform one step of (essentially stochastic gradient descent) learning on that example, and then discard that example and move on to the next.

C. In the approach to online learning discussed in the lecture video, we repeatedly get a single training example, take one step of stochastic gradient descent using that example, and then move on to the next example.

One of the advantages of online learning is that there is no need to pick a learning rate α\alphaα.


Question 4

Assuming that you have a very large training set, which of the

following algorithms do you think can be parallelized using

map-reduce and splitting the training set across different

machines? Check all that apply.
1 point

C. Linear regression trained using batch gradient descent.

C. A neural network trained using batch gradient descent.

An online learning setting, where you repeatedly get a single example (x,y)(x,y)(x,y), and want to learn from that single example before moving on.

Logistic regression trained using stochastic gradient descent.



1 point

Logistic regression trained using stochastic gradient descent.

Linear regression trained using stochastic gradient descent.

C. Computing the average of all the features in your training set μ=1m∑i=1mx(i)\mu = \frac{1}{m} \sum_{i=1}^m x^{(i)}μ=m1​∑i=1m​x(i) (say in order to perform mean normalization).

C. Logistic regression trained using batch gradient descent. 


5.
Question 5

Which of the following statements about map-reduce are true? Check all that apply.
1 point

C. Because of network latency and other overhead associated with map-reduce, if we run map-reduce using NNN computers, we might get less than an NNN-fold speedup compared to using 1 computer.

Linear regression and logistic regression can be parallelized using map-reduce, but not neural network training.

C. If you have only 1 computer with 1 computing core, then map-reduce is unlikely to help.

C. When using map-reduce with gradient descent, we usually use a single machine that accumulates the gradients from each of the map-reduce machines, in order to compute the parameter update for that iteration.


C.In order to parallelize a learning algorithm using map-reduce, the first step is to figure out how to express the main work done by the algorithm as computing sums of functions of training examples.

C. If you have just 1 computer, but your computer has multiple CPUs or multiple cores, then map-reduce might be a viable way to parallelize your learning algorithm.

Running map-reduce over NNN computers requires that we split the training set into N2N^2N2 pieces.

C. When using map-reduce with gradient descent, we usually use a single machine that accumulates the gradients from each of the map-reduce machines, in order to compute the parameter update for that iteration.

  
